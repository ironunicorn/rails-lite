<link href='https://fonts.googleapis.com/css?family=Alegreya:400,400italic|Abril+Fatface|Nixie+One' rel='stylesheet' type='text/css'>
<div class="title">
<h1>SHOWING <%= @cat.name %></h1>
<pre><%= flash["flash now"] if flash["flash now"] %></pre>
<pre><%= flash["flash next"] if flash["flash next"] %></pre>
<% if current_user && current_user.id == @cat.human_id %>
<a href="/cats/<%= @cat.id %>/edit"><button class="new">EDIT <%= @cat.name %></button></a>
<br>
<form action="/cats/<%= @cat.id %>" method="post">
  <input type="hidden" name="_method" value="delete">
  <input type="hidden" name="security" value="<%= form_authenticity_token %>">
  <input type="submit" class="new" value="Wake up <%= @cat.name %> (destroy action)">
</form>
<% end %>
<br>
</div>

<div class="navigation">
	<a href="/"><div class="logo">
		RESTful Cats
	</div></a>
		<ul>
			<a href="/cats"><li>Index</li></a>
			<a href='/go_live'><li>Launch an App</li></a>

	<% if current_user %>
		<li><form action="/session" method="post">
			<input type="hidden" name="_method" value="delete">
			<input type="hidden" name="security" value="<%= form_authenticity_token %>">
			<input type="submit" class="logout" value="Logout (DESTROY session)">
		</form></li>
	<% else %>
			<a href="/session/new"><li>Sign In (NEW session)</li></a>
			<a href="/humans/new"><li>Sign Up (NEW user)</li></a>
	<% end %>
		</ul>
</div>

<div class="explanation">
	<h2>Code and Explanations</h2>
  <% if flash["flash now"] && flash["flash now"].include?("created") %>
    <h3>Creating a Cat</h3>
    <p>
      Woohoo! It looks like you just made a new cat. This is typically done
      through a "create" method. Now is a good time to highlight the params method
      that processes the http request.
    </p>
    <pre>
class Params
  def initialize(req, route_params = {})
    @params = route_params.stringify_keys
    parse_www_encoded_form(req.query_string) if req.query_string
    parse_www_encoded_form(req.body) if req.body
  end

  def [](key)
    @params[key.to_s]
  end

  def to_s
    @params.to_s
  end

  private
  def parse_www_encoded_form(www_encoded_form)
    array = URI::decode_www_form(www_encoded_form)
    array.each do |arr|
      nested_keys = parse_key(arr[0])
      nested_keys.map! { |key| key.to_s }
      key_level = @params
      until nested_keys.length == 1
        new_nest = nested_keys.shift
        key_level[new_nest] ||= {}
        key_level = key_level[new_nest]
      end
      key_level[nested_keys.first] = arr[1]
    end
  end

  def parse_key(key)
    key.split(/\]\[|\[|\]/)
  end
end
    </pre>
    <p>
      This class borrows from the URI library to parse the request's query string
      and body(the place where the cat's form information goes). This is smart
      enough to parse top level keys, but since ["cat"] has a nested key, ["name"],
      we need to go deeper for it to be of use. This is where the cool parse_www_encoded_form(www_encoded_form)
      method comes in. It parses params of any depth into readable ruby hashes.
    </p>
    <p>
      Now that the form data is readable, it's passed to the cat model where the
      SQLObject base runs the following:
    </p>
    <pre>
class SQLObject
  def insert
    columns = "#{attributes.keys.join(', ')}"
    DBConnection.execute(<<-SQL, *attribute_values)
      INSERT INTO
        #{self.class.table_name} (#{columns})
      VALUES
        (#{(['?'] * attribute_values.length).join(', ')})
    SQL

    self.id = DBConnection.last_insert_row_id
  end

  def update
    columns = "#{attributes.keys.drop(1).join(' = ?, ')} = ?"
    DBConnection.execute(<<-SQL, *(attribute_values.rotate))
      UPDATE
        #{self.class.table_name}
      SET
        #{columns}
      WHERE
        id = ?
    SQL
  end

  def save
    id.nil? ? insert : update
  end
end
    </pre>
    <p>
      As you can see, the save method double checks whether this particular cat
      exists already and smartly calls insert or update accordingly.
    </p>
    <p>
      And now you have a new cat! Try editing or waking it if you'd like.
    </p>
  <% elsif flash["flash now"] && flash["flash now"].include?("updated") %>
    <h3>Updating a Cat</h3>
    <p>
      Cool! It looks like you just updated your cat. This is typically done
      through a "update" method.
    </p>
    <p>
      This is a work in progress so check back later for more details. In the meantime,
      feel free to check out the <a href="https://github.com/ironunicorn/rails-lite">raw code</a> on Github.
    </p>
  <% else %>
    <h3>Showing a Cat</h3>
    <p>
      This is a work in progress so check back later for more details. In the meantime,
      feel free to check out the <a href="https://github.com/ironunicorn/rails-lite">raw code</a> on Github.
    </p>
  <% end %>
</div>
<style>

  html, body {
    padding: 0px;
    margin: 0px;
  }

  h1, h2, h3 {
    line-height: 1;
    margin: 10px;
    font-family: Abril Fatface, sans-serif;
  }

  p, a {
    line-height: 1;
    margin: 10px;
    font-family: 'Alegreya', serif;
  }
	pre {
		font-size: 1.3em;
	}
  label {
    font-family: 'Alegreya', serif;
    padding: 10px;
    font-size: 1.3em;
    color: #683C0B;
    margin: 20px 0px;
  }
  input.form {
    font-size: 0.7em;
    padding: 3px 5px;
    border-radius: 5px;
    width: 250px;
  }

  input.new {
    margin: 10px 10px;
    background-color: #C38E4A;
    font-size: 1.4em;
    border-radius: 10px;
    border: none;
    color: white;
    padding: 10px;
    cursor: pointer;
    text-align: right;
  }
  input.new:hover {
    box-shadow: 1px 1px 1px black;
    background-color: #683C0B;
  }
  button {
    background-color: #C38E4A;
    font-size: 1.8em;
    border-radius: 10px;
    border: none;
    color: white;
    padding: 10px;
    cursor: pointer;
		margin: 20px;
  }
  button:hover {
    box-shadow: 1px 1px 1px black;
    background-color: #683C0B;
  }

  .title {
		border: 3px solid #683C0B;
		padding: 20px;
		border-radius: 10px;
		max-width: 700px;
		margin: 70px auto;
    box-sizing: border-box;
    height: 70vh;
		overflow-y: scroll;
    background: url('http://res.cloudinary.com/disran0g3/image/upload/v1441559945/cat7_vdokah.png') no-repeat bottom right;
  }

  .title button {
    margin: 10px 0px;
    background-color: #C38E4A;
    font-size: 1.4em;
    border-radius: 10px;
    border: none;
    color: white;
    padding: 10px;
    cursor: pointer;
    text-align: right;
  }

	.title h1 {
		font-size: 3em;
		color: #7B0515;
    line-height: 1.5;
	}

	.title li {
		font-size: 1.5em;
		line-height: 1.5;
	}

	.title ul {
		list-style-type: none;
	}

	.title a {
		text-decoration: none;
		color: #683C0B;
	}

	.title a:visited {
		text-decoration: none;
		color: #C38E4A;
	}
	.title a:hover {
		color: #851C21;
	}

  .navigation {
    position: fixed;
    top: 0px;
    left: 0px;
    width: 100%;
    z-index: 3;
    background: rgba(104,60,11, 0.5);
    height: 50px;
  }
	.logo {
		font-family: Abril Fatface, sans-serif;
		font-size: 2em;
		padding: 10px 40px;
		float: left;
		color: #7B0515;
		cursor: pointer;
	}
	.navigation button {
		margin: -9px -15px;
		font-size: 0.8em;
	}

	.navigation ul {
		float: right;
	}
	.navigation li {
		float: left;
		list-style-type: none;
		font-size: 1.3em;
		padding: 0px 10px;
	}
	.navigation a {
		color: #683C0B;
	}
	.navigation a:hover {
		color: white;
	}

  .logout {
    font-size: 0.8em;
    border-radius: 10px;
    border: none;
    color: white;
    padding: 8px 10px;
    cursor: pointer;
    margin: -8px 0px;
    background-color: #C38E4A;
  }
  .logout:hover {
    background-color: #683C0B;
    box-shadow: 1px 1px 1px black;
    /*margin: 6px;*/
  }
  .explanation {
    max-width: 700px;
    margin: 50px auto;
		padding: 0 10px 10px 10px;
  }
  .explanation h2 {
    color: #851C21;
    font-size: 2em;
    line-height 2;
    margin: 75px 0px 50px 0px;
  }

	.explanation h3 {
		color: #C38E4A;
    font-size: 1.5em;
    line-height 2;
    margin: 50px 0px 25px 0px;
	}
  .explanation p {
    line-height: 1.5;
    font-size: 1.3em;
    color: #683C0B;
    margin: 20px 0px;
  }

  .explanation button {
    margin: 50px 10px;
    font-size: 1.3em;
    float: right;
    background-color: #C38E4A;
  }
  .explanation button:hover {
    background-color: #683C0B;
  }
</style>
